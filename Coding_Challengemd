show databases;
use assignments;
show tables;

create table customers(
customer_id int not null primary key,
name varchar(255),
email varchar(255),
password varchar(50)
);

alter table customers rename column name to firstName;
alter table customers add lastName varchar(255);
alter table customers drop column password;
alter table customers add address varchar(255);

select * from customers;
alter table customers rename column email to LastName;
alter table customers rename column x to email;

insert into customers values
(1, 'John',' Doe', 'johndoe@example.com',' 123 Main St, City'),
(2 ,'Jane' ,'Smith' ,'janesmith@example.com 456 ','Elm St, Town'),
(3, 'Robert', 'Johnson', 'robert@example.com ','789 Oak St, Village'),
(4 ,'Sarah' ,'Brown',' sarah@example.com',' 101 Pine St, Suburb'),
(5, 'David',' Lee', 'david@example.com',' 234 Cedar St, District'),
(6 ,'Laura',' Hall',' laura@example.com',' 567 Birch St, County'),
(7, 'Michael',' Davis',' michael@example.com',' 890 Maple St, State'),
(8, 'Emma ','Wilson' ,'emma@example.com ','321 Redwood St, Country'),
(9, 'William',' Taylor',' william@example.com',' 432 Spruce St, Province'),
(10, 'Olivia',' Adams', 'olivia@example.com',' 765 Fir St, Territory');

create table products(
product_id int not null primary key,
name varchar(255),
description varchar(255),
price decimal(10,2),
stockQuantity int
);

insert into products values
(1, 'Laptop','High-performance laptop', 800.00, 10),
(2, 'Smartphone', 'Latest smartphone', 600.00 ,15),
(3, 'Tablet', 'Portable tablet', 300.00 ,20),
(4, 'Headphones', 'Noise-canceling', 150.00 ,30),
(5, 'TV', '4K Smart TV', 900.00 ,5),
(6, 'Coffee Maker', 'Automatic coffee maker', 50.00 ,25),
(7, 'Refrigerator', 'Energy-efficient', 700.00 ,10),
(8, 'Microwave Oven', 'Countertop microwave', 80.00 ,15),
(9, 'Blender', 'High-speed blender', 70.00, 20),
(10, 'Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10);

select * from products;

create table cart(
cart_id int not null primary key,
customer_id int,
product_id int,
quantity int,
foreign key (customer_id) references customers(customer_id),
foreign key (product_id) references products(product_id)
);

select * from cart; 
insert into cart values 
(1 ,1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 4, 4),
(5, 3, 5, 2),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 6, 10, 2),
(9, 6, 9, 3),
(10, 7, 7, 2);

create table orders(
order_id int not null primary key,
customer_id int,
order_date date,
total_price decimal(10,2),
shipping_address varchar(255),
foreign key (customer_id) references customers(customer_id)
);

select * from orders;
alter table orders drop column shipping_address;

insert into orders values 
(1, 1, '2023-01-05',1200.00),
(2, 2, '2023-02-10', 900.00),
(3, 3, '2023-03-15', 300.00),
(4, 4, '2023-04-20', 150.00),
(5, 5, '2023-05-25', 1800.00),
(6, 6, '2023-06-30', 400.00),
(7, 7, '2023-07-05', 700.00),
(8, 8, '2023-08-10', 160.00),
(9, 9, '2023-09-15', 140.00),
(10, 10, '2023-10-20', 1400.00);

drop table order_items;
create table order_items(
order_item_id int not null primary key,
order_id int,
product_id int,
quantity int,
foreign key (order_id) references orders(order_id),
foreign key (product_id) references products(product_id)
);
alter table order_items add itemAmount decimal(10,2);
insert into order_items values
(1 ,1 ,1 ,2, 1600.00),
(2 ,1 ,3 ,1 ,300.00),
(3, 2, 2, 3, 1800.00),
(4, 3, 5, 2, 1800.00),
(5, 4, 4, 4, 600.00),
(6, 4, 6, 1, 50.00),
(7, 5, 1, 1, 800.00),
(8, 5, 2, 2, 1200.00),
(9, 6, 10 ,2 ,240.00),
(10, 6, 9, 3, 210.00);

select * from order_items;

/* 1. Update refrigerator product price to 800.*/
select * from products;
update products set price=800 where name='refrigerator';
set sql_safe_updates=0;

/* Remove all cart items for a specific customer.*/
delete from cart where customer_id=1;
select * from cart;

/* Retrieve Products Priced Below $100.*/
select * from products where price<100.00;

/* Find Products with Stock Quantity Greater Than 5.*/
select * from products;
select * from products where stockQuantity>5;

/* . Retrieve Orders with Total Amount Between $500 and $1000.*/
select * from orders;
select * from orders where total_price between 500 and 1000;

/* 6. Find Products which name end with letter ‘r’. */
select name from products where name like '%r';

/* 7. Retrieve Cart Items for Customer 5.*/
select* from products;
select c.*,p.name  from cart c inner join products p 
on c.product_id=p.product_id where c.customer_id=5;

/* 8. Find Customers Who Placed Orders in 2023.*/
select * from customers;
select c.firstName,c.LastName,o.order_date from customers c inner join orders o on c.customer_id=
o.customer_id where year(order_date)=2023;

/* 9. Determine the Minimum Stock Quantity for Each Product Category.*/
select distinct(name) ,min(stockQuantity) as MinStock from products group by name;

/* 10. Calculate the Total Amount Spent by Each Customer */
select c.customer_id,concat(c.firstName,' ',c.LastName) as Customer_Name,
sum(o.total_price) as Total_Price from customers c inner join orders o on 
c.customer_id=o.customer_id group by c.customer_id;

/* 11. Find the Average Order Amount for Each Customer.*/
select c.customer_id , concat(c.firstName,' ',c.lastName) as Customer_name,avg(o.total_price) as Average
from customers c join orders o on c.customer_id=o.customer_id group by c.customer_id;

/* 12. Count the Number of Orders Placed by Each Customer. */
select * from orders;
select order_id as Customer_ID,count(order_id) from order_items group by order_id ;

/* 13 Find the Maximum Order Amount for Each Customer.*/
select o.customer_id, CONCAT(c.firstName, ' ', c.lastName) AS customer_name, MAX(o.total_price) AS max_order_amount
from orders o inner join customers c ON o.customer_id = c.customer_id
group by o.customer_id, c.firstName, c.lastName;


/* 14. Get Customers Who Placed Orders Totaling Over $1000.*/
select c.customer_id, CONCAT(c.firstName, ' ', c.lastName) AS customer_name
from customers c inner join orders o ON c.customer_id = o.customer_id
group by c.customer_id, c.firstName, c.lastName having SUM(o.total_price) > 1000;

/* 15. Subquery to Find Products Not in the Cart*/
select * from products where product_id not in (select distinct product_id from cart);

/* 16. Subquery to Find Customers Who Haven't Placed Orders */
select * from customers where customer_id not in (select distinct customer_id from orders);

/* 17. Subquery to Calculate the Percentage of Total Revenue for a Product.
*/
SELECT product_id,(sum(itemAmount) / (select sum(itemAmount) from order_items))*100 as Total_percentage
from order_items group by product_id;

/* 18. Subquery to Find Products with Low Stock.*/
select * from products where stockQuantity<(select avg(stockQuantity) from products);

/* 19. Subquery to Find Customers Who Placed High-Value Orders.*/
select c.customer_id, concat(c.firstName, ' ', c.lastName) as customerName from customers c where c.customer_id in (select o.customer_id from orders o
group by o.customer_id having max(o.total_price) = (select max(total_price) from orders) );



changes made in 22-03-2024



